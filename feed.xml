<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://xoofx.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <title>xoofx</title>
    <link>https://xoofx.github.io/</link>
    <description>xoofx website</description>
    <generator>lunet 0.5.3.0</generator>
    <managingEditor>Alexandre Mutel</managingEditor>
    <copyright>Alexandre Mutel</copyright>
    <pubDate>Mon, 20 May 2024 18:53:32 +0000</pubDate>
    <lastBuildDate>Mon, 20 May 2024 18:53:32 +0000</lastBuildDate>
    <item>
      <title>Building a secure 10G Home Network</title>
      <link>https://xoofx.github.io/blog/2024/03/22/building-secure-10g-home-network</link>
      <pubDate>Fri, 22 Mar 2024 00:00:00 +0000</pubDate>
      <author>Alexandre Mutel</author>
      <guid isPermaLink="true">https://xoofx.github.io/blog/2024/03/22/building-secure-10g-home-network</guid>
      <description>Building a secure 10G Home Network | xoofx Home Blog Projects About Building a secure 10G Home Network Use your Network at its full potential! March 22, 2024 Network, OPNsense, Firewall, Tailscale edit A few weeks ago, I was finally able to upgrade my Internet connection from a Starlink 100-200 Mbps (with an ADLS2 backup) to a 8 Gbps up/down Fiber connection with the Free Ultra box offer. By doing...</description>
      <category>Network</category>
      <category>OPNsense</category>
      <category>Firewall</category>
      <category>Tailscale</category>
    </item>
    <item>
      <title>10x Performance with SIMD Vectorized Code in C#/.NET</title>
      <link>https://xoofx.github.io/blog/2023/07/09/10x-performance-with-simd-in-csharp-dotnet</link>
      <pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate>
      <author>Alexandre Mutel</author>
      <guid isPermaLink="true">https://xoofx.github.io/blog/2023/07/09/10x-performance-with-simd-in-csharp-dotnet</guid>
      <description>10x Performance with SIMD Vectorized Code in C#/.NET | xoofx Home Blog Projects About 10x Performance with SIMD Vectorized Code in C#/.NET Use your CPU at its full width! July 9, 2023 C#, .NET, x86, assembler edit In the middle of my holidays, I was browsing my Mastodon feed and found an interesting challenge, small enough that I don&#39;t have to spend days to figure this out, but also interesting...</description>
      <category>C#</category>
      <category>.NET</category>
      <category>x86</category>
      <category>assembler</category>
    </item>
    <item>
      <title>Comments in Code</title>
      <link>https://xoofx.github.io/blog/2023/06/23/comments-in-code</link>
      <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
      <author>Alexandre Mutel</author>
      <guid isPermaLink="true">https://xoofx.github.io/blog/2023/06/23/comments-in-code</guid>
      <description>Comments in Code | xoofx Home Blog Projects About Comments in Code Wait, I thought it was about quality? June 23, 2023 edit I haven&#39;t been blogging for a while, and this post is not going to be a real blog post! But I wanted to share an old presentation I made a few years ago at my company about Comments in code, as I think that it is worth...</description>
    </item>
    <item>
      <title>Stark - Native Compiler - Prototype 2019</title>
      <link>https://xoofx.github.io/blog/2020/03/21/stark-native-compiler</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      <author>Alexandre Mutel</author>
      <guid isPermaLink="true">https://xoofx.github.io/blog/2020/03/21/stark-native-compiler</guid>
      <description>Stark - Native Compiler - Prototype 2019 | xoofx Home Blog Projects About Stark - Native Compiler - Prototype 2019 Development of an AOT native compiler using RyuJIT March 21, 2020 Stark, Melody, OS, Compiler, LLVM, C#, .NET edit This is the second part of the blog post series about The Odyssey of Stark and Melody and more specifically, about the development of a prototype of the native compiler for...</description>
      <category>Stark</category>
      <category>Melody</category>
      <category>OS</category>
      <category>Compiler</category>
      <category>LLVM</category>
      <category>C#</category>
      <category>.NET</category>
    </item>
    <item>
      <title>Stark - Language And Frontend Compiler - Prototype 2019</title>
      <link>https://xoofx.github.io/blog/2020/03/06/stark-language-frontend-compiler</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      <author>Alexandre Mutel</author>
      <guid isPermaLink="true">https://xoofx.github.io/blog/2020/03/06/stark-language-frontend-compiler</guid>
      <description>Stark - Language And Frontend Compiler - Prototype 2019 | xoofx Home Blog Projects About Stark - Language And Frontend Compiler - Prototype 2019 Syntax of the language and the development of the front-end compiler March 6, 2020 Stark, Melody, OS, Compiler, LLVM, C#, .NET edit This is the first part of the blog post series about The Odyssey of Stark and Melody and more specifically, about the development of...</description>
      <category>Stark</category>
      <category>Melody</category>
      <category>OS</category>
      <category>Compiler</category>
      <category>LLVM</category>
      <category>C#</category>
      <category>.NET</category>
    </item>
    <item>
      <title>The Odyssey of Stark and Melody</title>
      <link>https://xoofx.github.io/blog/2020/03/05/stark-melody-dotnet-sel4</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <author>Alexandre Mutel</author>
      <guid isPermaLink="true">https://xoofx.github.io/blog/2020/03/05/stark-melody-dotnet-sel4</guid>
      <description>The Odyssey of Stark and Melody | xoofx Home Blog Projects About The Odyssey of Stark and Melody Prototyping a new language and OS with the help of the .NET ecosystem and seL4 micro-kernel March 5, 2020 Stark, Melody, OS, Compiler, LLVM, C#, .NET edit What would it take these days to build a prototype of a new language and operating system built on top of it, just for fun?...</description>
      <category>Stark</category>
      <category>Melody</category>
      <category>OS</category>
      <category>Compiler</category>
      <category>LLVM</category>
      <category>C#</category>
      <category>.NET</category>
    </item>
    <item>
      <title>Behind the burst compiler</title>
      <link>https://xoofx.github.io/blog/2019/03/28/behind-the-burst-compiler</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      <author>Alexandre Mutel</author>
      <guid isPermaLink="true">https://xoofx.github.io/blog/2019/03/28/behind-the-burst-compiler</guid>
      <description>Behind the burst compiler | xoofx Home Blog Projects About Behind the burst compiler March 28, 2019 burst, Compiler, C#, .NET edit Last year I made a presentation to Unite LA, the dotnetos conference in Warsaw and to the dotnext conference in Moscow of the burst compiler that we have been working on for the past two years at Unity In a nutshell: The burst compiler is a technology aimed...</description>
      <category>burst</category>
      <category>Compiler</category>
      <category>C#</category>
      <category>.NET</category>
    </item>
    <item>
      <title>Generate automatically async/await code from sync code with Roslyn</title>
      <link>https://xoofx.github.io/blog/2018/12/26/generate-async-from-sync-code-with-roslyn</link>
      <pubDate>Wed, 26 Dec 2018 00:00:00 +0000</pubDate>
      <author>Alexandre Mutel</author>
      <guid isPermaLink="true">https://xoofx.github.io/blog/2018/12/26/generate-async-from-sync-code-with-roslyn</guid>
      <description>Generate automatically async/await code from sync code with Roslyn | xoofx Home Blog Projects About Generate automatically async/await code from sync code with Roslyn December 26, 2018 C#, .NET, Roslyn edit This is a quick post to give you some feedback about an experiment I just made with the Scriban Text Templating Library to add support for async/await automatically from the existing synchronous code, all of this done by using...</description>
      <category>C#</category>
      <category>.NET</category>
      <category>Roslyn</category>
    </item>
    <item>
      <title>Writing a Managed JIT in C# with CoreCLR</title>
      <link>https://xoofx.github.io/blog/2018/04/12/writing-managed-jit-in-csharp-with-coreclr</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      <author>Alexandre Mutel</author>
      <guid isPermaLink="true">https://xoofx.github.io/blog/2018/04/12/writing-managed-jit-in-csharp-with-coreclr</guid>
      <description>Writing a Managed JIT in C# with CoreCLR | xoofx Home Blog Projects About Writing a Managed JIT in C# with CoreCLR April 12, 2018 C#, .NET, CoreCLR edit As you may know, in .NET CoreCLR (and Mono), the JIT has been entirely written in C/C++. That&#39;s sometimes even a joke used by C++ developers to remind the enthusiastic C# developer crowd that their ecosystem is being actually ran by...</description>
      <category>C#</category>
      <category>.NET</category>
      <category>CoreCLR</category>
    </item>
    <item>
      <title>Porting the Unity Engine to .NET CoreCLR</title>
      <link>https://xoofx.github.io/blog/2018/04/06/porting-unity-to-coreclr</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      <author>Alexandre Mutel</author>
      <guid isPermaLink="true">https://xoofx.github.io/blog/2018/04/06/porting-unity-to-coreclr</guid>
      <description>Porting the Unity Engine to .NET CoreCLR | xoofx Home Blog Projects About Porting the Unity Engine to .NET CoreCLR April 6, 2018 C#, .NET, CoreCLR, Unity edit NOTE: This work was a prototype as we don&#39;t have yet an official roadmap and timetable in mind to bring this to Unity, more on that later this year hopefully ;) This blog post is also my own opinionated vision on the...</description>
      <category>C#</category>
      <category>.NET</category>
      <category>CoreCLR</category>
      <category>Unity</category>
    </item>
  </channel>
</rss>